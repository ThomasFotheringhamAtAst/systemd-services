"use strict";
var Promise = require('bluebird');
var child_process = require('child_process');
var exec = child_process.exec;
var SysService = (function () {
    function SysService() {
    }
    SysService.prototype.status = function (service) {
        return new Promise(function (resolve, reject) {
            exec('systemctl status ' + service, function (err, stdout, stderr) {
                if (stderr) {
                }
                if (!stdout) {
                    reject(err);
                }
                else {
                    var outperline = stdout.split('\n');
                    var status_1 = {
                        active: false
                    };
                    for (var i = 0; i < outperline.length; i++) {
                        var line = outperline[i];
                        if (line.split('Active:').length > 1) {
                            status_1.active_status = line.split('Active: ')[1];
                            if (status_1.active_status.split(' ')[0] === 'active') {
                                status_1.active = true;
                            }
                        }
                    }
                    resolve(status_1);
                }
            });
        });
    };
    SysService.prototype.start = function (service) {
        return new Promise(function (resolve, reject) {
            exec('systemctl start ' + service, function (err, stdout, stderr) {
                if (stderr) {
                    console.error(stderr);
                }
                if (err) {
                    reject(err);
                }
                else {
                    resolve(true);
                }
            });
        });
    };
    SysService.prototype.stop = function (service) {
        return new Promise(function (resolve, reject) {
            exec('systemctl stop ' + service, function (err, stdout, stderr) {
                if (stderr) {
                    console.error(stderr);
                }
                if (err) {
                    reject(err);
                }
                else {
                    resolve(true);
                }
            });
        });
    };
    SysService.prototype.restart = function (service) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.stop(service).then(function () {
                _this.start(service).then(function () {
                    resolve(true);
                }).catch(function (err) {
                    reject(err);
                });
            }).catch(function (err) {
                _this.start(service).then(function () {
                    resolve(true);
                }).catch(function (err) {
                    reject(err);
                });
            });
        });
    };
    SysService.prototype.enable = function (service) {
        return new Promise(function (resolve, reject) {
            exec('systemctl enable ' + service, function (err, stdout, stderr) {
                if (stderr) {
                    console.error(stderr);
                }
                if (err) {
                    reject(err);
                }
                else {
                    resolve(true);
                }
            });
        });
    };
    return SysService;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SysService;

//# sourceMappingURL=data:application/json;base64,
