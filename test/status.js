"use strict";
var index_1 = require('../index');
var chai = require("chai");
var expect = chai.expect;
var ns = new index_1.default();
describe("statuses", function () {
    it("a working process return a status that is active", function (done) {
        ns.status('networking').then(function (a) {
            expect(a).to.be.ok;
            expect(a).to.be.an('object');
            expect(a.active).to.be.a('boolean').that.equal(true);
            expect(a.active_status).to.be.a('string');
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("a foreign service return a non active status", function (done) {
        ns.status('lkgklglgoiuguoig').then(function (a) {
            expect(a).to.be.ok;
            expect(a).to.be.an('object');
            expect(a.active).to.be.a('boolean').that.equal(false);
            expect(a.active_status).to.be.a('string');
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
});
describe("is-active", function () {
    it("an active service return true", function (done) {
        ns.isActive('networking').then(function (a) {
            expect(a).to.be.ok;
            expect(a).to.be.a('boolean').that.equal(true);
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("a foreign or inactive service return false", function (done) {
        ns.isActive('jrejoreig').then(function (a) {
            expect(a).to.be.a('boolean').that.equal(false);
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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SUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ3BCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsNENBQTRDLEVBQUUsVUFBQyxJQUFJO1FBQ2xELEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBTTtZQUNqQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7WUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDcEIsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtBQUVOLENBQUMsQ0FBQyxDQUFBIiwiZmlsZSI6InRlc3Qvc3RhdHVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgU3lzU2VydmljZSBmcm9tICcuLi9pbmRleCc7XG5cbmltcG9ydCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxuXG5jb25zdCBucyA9IG5ldyBTeXNTZXJ2aWNlKClcblxuXG5cbmRlc2NyaWJlKFwic3RhdHVzZXNcIiwgKCkgPT4ge1xuICAgIGl0KFwiYSB3b3JraW5nIHByb2Nlc3MgcmV0dXJuIGEgc3RhdHVzIHRoYXQgaXMgYWN0aXZlXCIsIChkb25lKSA9PiB7XG4gICAgICAgIG5zLnN0YXR1cygnbmV0d29ya2luZycpLnRoZW4oKGE6IGFueSkgPT4ge1xuXG4gICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2s7XG4gICAgICAgICAgICBleHBlY3QoYSkudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGEuYWN0aXZlKS50by5iZS5hKCdib29sZWFuJykudGhhdC5lcXVhbCh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChhLmFjdGl2ZV9zdGF0dXMpLnRvLmJlLmEoJ3N0cmluZycpO1xuXG4gICAgICAgICAgICBkb25lKClcblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBkb25lKEVycm9yKGVycikpXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KFwiYSBmb3JlaWduIHNlcnZpY2UgcmV0dXJuIGEgbm9uIGFjdGl2ZSBzdGF0dXNcIiwgKGRvbmUpID0+IHtcbiAgICAgICAgbnMuc3RhdHVzKCdsa2drbGdsZ29pdWd1b2lnJykudGhlbigoYTogYW55KSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2s7XG4gICAgICAgICAgICBleHBlY3QoYSkudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGEuYWN0aXZlKS50by5iZS5hKCdib29sZWFuJykudGhhdC5lcXVhbChmYWxzZSk7XG4gICAgICAgICAgICBleHBlY3QoYS5hY3RpdmVfc3RhdHVzKS50by5iZS5hKCdzdHJpbmcnKTtcblxuICAgICAgICAgICAgZG9uZSgpXG5cbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgZG9uZShFcnJvcihlcnIpKVxuICAgICAgICB9KVxuICAgIH0pXG5cblxufSlcblxuXG5cblxuZGVzY3JpYmUoXCJpcy1hY3RpdmVcIiwgKCkgPT4ge1xuICAgIGl0KFwiYW4gYWN0aXZlIHNlcnZpY2UgcmV0dXJuIHRydWVcIiwgKGRvbmUpID0+IHtcbiAgICAgICAgbnMuaXNBY3RpdmUoJ25ldHdvcmtpbmcnKS50aGVuKChhOiBhbnkpID0+IHtcblxuICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLm9rO1xuICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLmEoJ2Jvb2xlYW4nKS50aGF0LmVxdWFsKHRydWUpO1xuXG4gICAgICAgICAgICBkb25lKClcblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBkb25lKEVycm9yKGVycikpXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KFwiYSBmb3JlaWduIG9yIGluYWN0aXZlIHNlcnZpY2UgcmV0dXJuIGZhbHNlXCIsIChkb25lKSA9PiB7XG4gICAgICAgIG5zLmlzQWN0aXZlKCdqcmVqb3JlaWcnKS50aGVuKChhOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhKS50by5iZS5hKCdib29sZWFuJykudGhhdC5lcXVhbChmYWxzZSk7XG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgZG9uZShFcnJvcihlcnIpKVxuICAgICAgICB9KVxuICAgIH0pXG5cbn0pXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
